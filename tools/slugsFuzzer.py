#!/usr/bin/python
#
# Does FUZZ-Tests on slugs, i.e., checks whether a specification is realizable or not, and checks the 

import random
import os
import sys
import subprocess

# =====================================================
# Difficulty Options
# =====================================================
nofAPsPerType = 3
probabilityPerProperty = 0.6

# =====================================================
# Execution Options
# =====================================================
ltlFile = "/tmp/fuzz.ltl"
smvFile = "/tmp/fuzz.smv"
slugsinFile = "/tmp/fuzz.slugsin"
nuSMVFile = "/tmp/fuzz.nusmv"
autFile = "/tmp/fuzz.aut"
slugsReturnFile = "/tmp/fuzz.slugsreturn"
slugsTranslatorScript = "./translateFromLTLMopLTLFormatToSlugsFormat.py"
nuSMVTranslatorScript = "./makeNuSMVInstanceToTestAutomatonFileAgainstSlugsSpecification.py"
NuSMVExecutable = "./NuSMV"
slugsExecutable = "../src/slugs"

# =====================================================
# Generate SMV file
# =====================================================
out = open(smvFile,"w")
out.write("-- Skeleton SMV file\n-- (Generated by the Fuzzer) \n\nMODULE main\n    VAR\n        e : env();\n        s : sys();\n\nMODULE env -- inputs\n    VAR\n")
for i in xrange(0,nofAPsPerType):
    out.write("		in"+str(i)+" : boolean;\n")
out.write("MODULE sys -- outputs\n    VAR\n")
for i in xrange(0,nofAPsPerType):
    out.write("		out"+str(i)+" : boolean;\n")
out.close()

# =====================================================
# Generate LTL file
# =====================================================

# Recursive specification generator
def makeAProperty(apsUsableWithoutNext,apsUsableWithNext):
    ops = ["!","next","&","|","AP","AP","TRUE"]
    op = random.choice(ops)
    while ((op=="next") and (len(apsUsableWithNext)==0)):
        op = random.choice(ops)

    if (op=="!"):
        return "!"+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)
    elif (op=="next"):
        return "next("+makeAProperty(apsUsableWithNext,[])+")"
    elif (op=="&"):
        return "(("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+")&("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+"))"
    elif (op=="|"):
        return "(("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+")|("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+"))"
    elif (op=="AP"):
        if len(apsUsableWithoutNext)>0:
            return random.choice(apsUsableWithoutNext)

    # Nothing else? Then it shall be "TRUE"
    return "TRUE"

# Create AP lists
apsInput = ["e.in"+str(i) for i in xrange(0,nofAPsPerType)]
apsOutput = ["s.out"+str(i) for i in xrange(0,nofAPsPerType)]

out = open(ltlFile,"w")
out.write("LTLSPEC -- Assumptions\n	( \n		TRUE  ")
# Init assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []<>("+makeAProperty(apsInput,[])+")\n")
# Safety assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []("+makeAProperty(apsInput+apsOutput,apsInput)+")\n")
# Liveness assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []<>("+makeAProperty(apsInput+apsOutput,[])+")\n")

out.write(");\n")
out.write("LTLSPEC -- Guarantees\n	( \n		TRUE  ")
# Init assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []<>("+makeAProperty(apsInput+apsOutput,[])+")\n")
# Safety assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []("+makeAProperty(apsInput+apsOutput,apsInput+apsOutput)+")\n")
# Liveness assumptions
while random.random() < probabilityPerProperty:
    out.write("  &  []<>("+makeAProperty(apsInput+apsOutput,[])+")\n")
out.write(");\n")
out.close()


# =====================================================
# Translate
# =====================================================
retValue = os.system(slugsTranslatorScript+" "+smvFile+" "+ltlFile+" > "+slugsinFile)
if (retValue!=0):
    print >>sys.stderr, "Translation from SMV/LTL file to Slugs file failed. Are you running this script from the correct directory?"
    sys.exit(1)

# =====================================================
# Slugs
# =====================================================
retValue = os.system(slugsExecutable + " --sysInitRoboticsSemantics "+slugsinFile+" "+autFile+" 2> "+slugsReturnFile)
if (retValue!=0):
    print >>sys.stderr, "Slugs failed!"
    sys.exit(1)

realizable = None
slugsReturn = open(slugsReturnFile,"r")
for line in slugsReturn.readlines():
    if line.strip() == "RESULT: Specification is unrealizable.":
        realizable = False
    elif line.strip() == "RESULT: Specification is realizable.":
        realizable = True
slugsReturn.close()

if realizable == None:
    print >>sys.stderr, "Slugs did not tell us if the specification is realizable or not!"
    sys.exit(1)

if realizable:
    # =====================================================
    # NuSMV translate
    # =====================================================
    retValue = os.system(nuSMVTranslatorScript+" "+slugsinFile+" "+autFile+" "+nuSMVFile)
    if (retValue!=0):
        print >>sys.stderr, "Translation to NuSMV failed!"
        sys.exit(1)

    # =====================================================
    # NuSMV
    # =====================================================
    retValue = os.system(NuSMVExecutable + " -bmc -bmc_length 3 "+nuSMVFile)
    if (retValue!=0):
        print >>sys.stderr, "NuSMV failed!"
        sys.exit(1)
