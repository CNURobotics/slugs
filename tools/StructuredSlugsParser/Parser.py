# LR(1) parser, autogenerated on 2014-02-24 08:32:17
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: grammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '&', '(', ')', '*', '+', '-', '/', '<', '=', '>', 'F', 'FALSE', 'G',
      'SubtractionOperator', 'TRUE', 'U', 'W', 'X', '[', '\\', ']', '^',
      'boolID', 'next', 'numID', 'numeral', '|', '~'

    nonterminal symbols:
      'AdditionOperator', 'Assignment', 'AtomicFormula',
      'AtomicNumberExpression', 'Biimplication', 'BiimplicationOperator',
      'BinaryTemporalFormula', 'BinaryTemporalOperator',
      'BooleanAtomicFormula', 'Brackets', 'CalculationSubformula',
      'Conjunction', 'ConjunctionOperator', 'Disjunction',
      'DisjunctionOperator', 'EqualOperator', 'FinallyOperator', 'Formula',
      'GloballyOperator', 'GreaterEqualOperator', 'GreaterOperator',
      'Implication', 'ImplicationOperator', 'MultiplicationOperator',
      'MultiplicativeNumber', 'NextOperator', 'NotOperator', 'NumberBrackets',
      'NumberComparisonOperator', 'NumberExpression', 'SmallerEqualOperator',
      'SmallerOperator', 'UnaryFormula', 'UnaryTemporalOperator',
      'UnequalOperator', 'UntilOperator', 'WeakUntilOperator', 'Xor',
      'XorOperator'

    production rules:
      'Formula' -> 'Biimplication'
      'Biimplication' -> 'Implication'
      'Biimplication' -> 'Biimplication' 'BiimplicationOperator' 'Implication'
      'Implication' -> 'Xor'
      'Implication' -> 'Implication' 'ImplicationOperator' 'Xor'
      'Xor' -> 'Disjunction'
      'Xor' -> 'Xor' 'XorOperator' 'Disjunction'
      'Disjunction' -> 'Conjunction'
      'Disjunction' -> 'Disjunction' 'DisjunctionOperator' 'Conjunction'
      'Conjunction' -> 'BinaryTemporalFormula'
      'Conjunction' -> 'Conjunction' 'ConjunctionOperator' 'BinaryTemporalFormula'
      'BinaryTemporalFormula' -> 'UnaryFormula'
      'BinaryTemporalFormula' -> 'BinaryTemporalFormula' 'BinaryTemporalOperator' 'UnaryFormula'
      'UnaryFormula' -> 'AtomicFormula'
      'UnaryFormula' -> 'UnaryTemporalOperator' 'UnaryFormula'
      'AtomicFormula' -> 'FALSE'
      'AtomicFormula' -> 'TRUE'
      'AtomicFormula' -> 'Brackets'
      'AtomicFormula' -> 'BooleanAtomicFormula'
      'Brackets' -> '(' 'Biimplication' ')'
      'Brackets' -> '[' 'Biimplication' ']'
      'BooleanAtomicFormula' -> 'Assignment'
      'BooleanAtomicFormula' -> 'CalculationSubformula'
      'Assignment' -> 'boolID'
      'CalculationSubformula' -> 'NumberExpression' 'NumberComparisonOperator' 'NumberExpression'
      'NumberExpression' -> 'MultiplicativeNumber'
      'NumberExpression' -> 'MultiplicativeNumber' 'AdditionOperator' 'NumberExpression'
      'NumberExpression' -> 'MultiplicativeNumber' 'SubtractionOperator' 'NumberExpression'
      'MultiplicativeNumber' -> 'AtomicNumberExpression'
      'MultiplicativeNumber' -> 'AtomicNumberExpression' 'MultiplicationOperator' 'AtomicNumberExpression'
      'AtomicNumberExpression' -> 'numID'
      'AtomicNumberExpression' -> 'numeral'
      'AtomicNumberExpression' -> 'NumberBrackets'
      'NumberBrackets' -> '(' 'NumberExpression' ')'
      'BinaryTemporalOperator' -> 'UntilOperator'
      'BinaryTemporalOperator' -> 'WeakUntilOperator'
      'UntilOperator' -> 'U'
      'WeakUntilOperator' -> 'W'
      'ImplicationOperator' -> '-' '-' '>'
      'ImplicationOperator' -> '-' '>'
      'BiimplicationOperator' -> '<' '-' '-' '>'
      'BiimplicationOperator' -> '<' '-' '>'
      'DisjunctionOperator' -> '\\' '/'
      'DisjunctionOperator' -> '|'
      'DisjunctionOperator' -> '|' '|'
      'ConjunctionOperator' -> '/' '\\'
      'ConjunctionOperator' -> '&'
      'ConjunctionOperator' -> '&' '&'
      'NumberComparisonOperator' -> 'GreaterOperator'
      'NumberComparisonOperator' -> 'EqualOperator'
      'NumberComparisonOperator' -> 'UnequalOperator'
      'NumberComparisonOperator' -> 'GreaterEqualOperator'
      'NumberComparisonOperator' -> 'SmallerEqualOperator'
      'NumberComparisonOperator' -> 'SmallerOperator'
      'GreaterOperator' -> '>'
      'SmallerOperator' -> '<'
      'EqualOperator' -> '='
      'UnequalOperator' -> '!' '='
      'SmallerEqualOperator' -> '<' '='
      'GreaterEqualOperator' -> '>' '='
      'AdditionOperator' -> '+'
      'MultiplicationOperator' -> '*'
      'XorOperator' -> '^'
      'UnaryTemporalOperator' -> 'FinallyOperator'
      'UnaryTemporalOperator' -> 'NextOperator'
      'UnaryTemporalOperator' -> 'GloballyOperator'
      'UnaryTemporalOperator' -> 'NotOperator'
      'FinallyOperator' -> '<' '>'
      'FinallyOperator' -> 'F'
      'NextOperator' -> '(' ')'
      'NextOperator' -> 'next'
      'NextOperator' -> 'X'
      'GloballyOperator' -> '[' ']'
      'GloballyOperator' -> 'G'
      'NotOperator' -> '!'
      'NotOperator' -> '~'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '&', '(', ')', '*', '+', '-', '/', '<', '=', '>', 'F',
                  'FALSE', 'G', 'SubtractionOperator', 'TRUE', 'U', 'W', 'X',
                  '[', '\\', ']', '^', 'boolID', 'next', 'numID', 'numeral',
                  '|', '~' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 106
    _reduce = {
        (2, EOF): ('Formula', 1), (3, EOF): ('Biimplication', 1),
        (3, ')'): ('Biimplication', 1), (3, '<'): ('Biimplication', 1),
        (3, ']'): ('Biimplication', 1), (7, EOF): ('Biimplication', 3),
        (7, ')'): ('Biimplication', 3), (7, '<'): ('Biimplication', 3),
        (7, ']'): ('Biimplication', 3), (8, EOF): ('Implication', 1),
        (8, ')'): ('Implication', 1), (8, '-'): ('Implication', 1),
        (8, '<'): ('Implication', 1), (8, ']'): ('Implication', 1),
        (10, EOF): ('Implication', 3), (10, ')'): ('Implication', 3),
        (10, '-'): ('Implication', 3), (10, '<'): ('Implication', 3),
        (10, ']'): ('Implication', 3), (11, EOF): ('Xor', 1),
        (11, ')'): ('Xor', 1), (11, '-'): ('Xor', 1), (11, '<'): ('Xor', 1),
        (11, ']'): ('Xor', 1), (11, '^'): ('Xor', 1), (13, EOF): ('Xor', 3),
        (13, ')'): ('Xor', 3), (13, '-'): ('Xor', 3), (13, '<'): ('Xor', 3),
        (13, ']'): ('Xor', 3), (13, '^'): ('Xor', 3),
        (14, EOF): ('Disjunction', 1), (14, ')'): ('Disjunction', 1),
        (14, '-'): ('Disjunction', 1), (14, '<'): ('Disjunction', 1),
        (14, '\\'): ('Disjunction', 1), (14, ']'): ('Disjunction', 1),
        (14, '^'): ('Disjunction', 1), (14, '|'): ('Disjunction', 1),
        (16, EOF): ('Disjunction', 3), (16, ')'): ('Disjunction', 3),
        (16, '-'): ('Disjunction', 3), (16, '<'): ('Disjunction', 3),
        (16, '\\'): ('Disjunction', 3), (16, ']'): ('Disjunction', 3),
        (16, '^'): ('Disjunction', 3), (16, '|'): ('Disjunction', 3),
        (17, EOF): ('Conjunction', 1), (17, '&'): ('Conjunction', 1),
        (17, ')'): ('Conjunction', 1), (17, '-'): ('Conjunction', 1),
        (17, '/'): ('Conjunction', 1), (17, '<'): ('Conjunction', 1),
        (17, '\\'): ('Conjunction', 1), (17, ']'): ('Conjunction', 1),
        (17, '^'): ('Conjunction', 1), (17, '|'): ('Conjunction', 1),
        (19, EOF): ('Conjunction', 3), (19, '&'): ('Conjunction', 3),
        (19, ')'): ('Conjunction', 3), (19, '-'): ('Conjunction', 3),
        (19, '/'): ('Conjunction', 3), (19, '<'): ('Conjunction', 3),
        (19, '\\'): ('Conjunction', 3), (19, ']'): ('Conjunction', 3),
        (19, '^'): ('Conjunction', 3), (19, '|'): ('Conjunction', 3),
        (20, EOF): ('BinaryTemporalFormula', 1),
        (20, '&'): ('BinaryTemporalFormula', 1),
        (20, ')'): ('BinaryTemporalFormula', 1),
        (20, '-'): ('BinaryTemporalFormula', 1),
        (20, '/'): ('BinaryTemporalFormula', 1),
        (20, '<'): ('BinaryTemporalFormula', 1),
        (20, 'U'): ('BinaryTemporalFormula', 1),
        (20, 'W'): ('BinaryTemporalFormula', 1),
        (20, '\\'): ('BinaryTemporalFormula', 1),
        (20, ']'): ('BinaryTemporalFormula', 1),
        (20, '^'): ('BinaryTemporalFormula', 1),
        (20, '|'): ('BinaryTemporalFormula', 1),
        (22, EOF): ('BinaryTemporalFormula', 3),
        (22, '&'): ('BinaryTemporalFormula', 3),
        (22, ')'): ('BinaryTemporalFormula', 3),
        (22, '-'): ('BinaryTemporalFormula', 3),
        (22, '/'): ('BinaryTemporalFormula', 3),
        (22, '<'): ('BinaryTemporalFormula', 3),
        (22, 'U'): ('BinaryTemporalFormula', 3),
        (22, 'W'): ('BinaryTemporalFormula', 3),
        (22, '\\'): ('BinaryTemporalFormula', 3),
        (22, ']'): ('BinaryTemporalFormula', 3),
        (22, '^'): ('BinaryTemporalFormula', 3),
        (22, '|'): ('BinaryTemporalFormula', 3),
        (23, EOF): ('UnaryFormula', 1), (23, '&'): ('UnaryFormula', 1),
        (23, ')'): ('UnaryFormula', 1), (23, '-'): ('UnaryFormula', 1),
        (23, '/'): ('UnaryFormula', 1), (23, '<'): ('UnaryFormula', 1),
        (23, 'U'): ('UnaryFormula', 1), (23, 'W'): ('UnaryFormula', 1),
        (23, '\\'): ('UnaryFormula', 1), (23, ']'): ('UnaryFormula', 1),
        (23, '^'): ('UnaryFormula', 1), (23, '|'): ('UnaryFormula', 1),
        (25, EOF): ('UnaryFormula', 2), (25, '&'): ('UnaryFormula', 2),
        (25, ')'): ('UnaryFormula', 2), (25, '-'): ('UnaryFormula', 2),
        (25, '/'): ('UnaryFormula', 2), (25, '<'): ('UnaryFormula', 2),
        (25, 'U'): ('UnaryFormula', 2), (25, 'W'): ('UnaryFormula', 2),
        (25, '\\'): ('UnaryFormula', 2), (25, ']'): ('UnaryFormula', 2),
        (25, '^'): ('UnaryFormula', 2), (25, '|'): ('UnaryFormula', 2),
        (26, EOF): ('AtomicFormula', 1), (26, '&'): ('AtomicFormula', 1),
        (26, ')'): ('AtomicFormula', 1), (26, '-'): ('AtomicFormula', 1),
        (26, '/'): ('AtomicFormula', 1), (26, '<'): ('AtomicFormula', 1),
        (26, 'U'): ('AtomicFormula', 1), (26, 'W'): ('AtomicFormula', 1),
        (26, '\\'): ('AtomicFormula', 1), (26, ']'): ('AtomicFormula', 1),
        (26, '^'): ('AtomicFormula', 1), (26, '|'): ('AtomicFormula', 1),
        (27, EOF): ('AtomicFormula', 1), (27, '&'): ('AtomicFormula', 1),
        (27, ')'): ('AtomicFormula', 1), (27, '-'): ('AtomicFormula', 1),
        (27, '/'): ('AtomicFormula', 1), (27, '<'): ('AtomicFormula', 1),
        (27, 'U'): ('AtomicFormula', 1), (27, 'W'): ('AtomicFormula', 1),
        (27, '\\'): ('AtomicFormula', 1), (27, ']'): ('AtomicFormula', 1),
        (27, '^'): ('AtomicFormula', 1), (27, '|'): ('AtomicFormula', 1),
        (28, EOF): ('AtomicFormula', 1), (28, '&'): ('AtomicFormula', 1),
        (28, ')'): ('AtomicFormula', 1), (28, '-'): ('AtomicFormula', 1),
        (28, '/'): ('AtomicFormula', 1), (28, '<'): ('AtomicFormula', 1),
        (28, 'U'): ('AtomicFormula', 1), (28, 'W'): ('AtomicFormula', 1),
        (28, '\\'): ('AtomicFormula', 1), (28, ']'): ('AtomicFormula', 1),
        (28, '^'): ('AtomicFormula', 1), (28, '|'): ('AtomicFormula', 1),
        (29, EOF): ('AtomicFormula', 1), (29, '&'): ('AtomicFormula', 1),
        (29, ')'): ('AtomicFormula', 1), (29, '-'): ('AtomicFormula', 1),
        (29, '/'): ('AtomicFormula', 1), (29, '<'): ('AtomicFormula', 1),
        (29, 'U'): ('AtomicFormula', 1), (29, 'W'): ('AtomicFormula', 1),
        (29, '\\'): ('AtomicFormula', 1), (29, ']'): ('AtomicFormula', 1),
        (29, '^'): ('AtomicFormula', 1), (29, '|'): ('AtomicFormula', 1),
        (31, EOF): ('Brackets', 3), (31, '&'): ('Brackets', 3),
        (31, ')'): ('Brackets', 3), (31, '-'): ('Brackets', 3),
        (31, '/'): ('Brackets', 3), (31, '<'): ('Brackets', 3),
        (31, 'U'): ('Brackets', 3), (31, 'W'): ('Brackets', 3),
        (31, '\\'): ('Brackets', 3), (31, ']'): ('Brackets', 3),
        (31, '^'): ('Brackets', 3), (31, '|'): ('Brackets', 3),
        (33, EOF): ('Brackets', 3), (33, '&'): ('Brackets', 3),
        (33, ')'): ('Brackets', 3), (33, '-'): ('Brackets', 3),
        (33, '/'): ('Brackets', 3), (33, '<'): ('Brackets', 3),
        (33, 'U'): ('Brackets', 3), (33, 'W'): ('Brackets', 3),
        (33, '\\'): ('Brackets', 3), (33, ']'): ('Brackets', 3),
        (33, '^'): ('Brackets', 3), (33, '|'): ('Brackets', 3),
        (34, EOF): ('BooleanAtomicFormula', 1),
        (34, '&'): ('BooleanAtomicFormula', 1),
        (34, ')'): ('BooleanAtomicFormula', 1),
        (34, '-'): ('BooleanAtomicFormula', 1),
        (34, '/'): ('BooleanAtomicFormula', 1),
        (34, '<'): ('BooleanAtomicFormula', 1),
        (34, 'U'): ('BooleanAtomicFormula', 1),
        (34, 'W'): ('BooleanAtomicFormula', 1),
        (34, '\\'): ('BooleanAtomicFormula', 1),
        (34, ']'): ('BooleanAtomicFormula', 1),
        (34, '^'): ('BooleanAtomicFormula', 1),
        (34, '|'): ('BooleanAtomicFormula', 1),
        (35, EOF): ('BooleanAtomicFormula', 1),
        (35, '&'): ('BooleanAtomicFormula', 1),
        (35, ')'): ('BooleanAtomicFormula', 1),
        (35, '-'): ('BooleanAtomicFormula', 1),
        (35, '/'): ('BooleanAtomicFormula', 1),
        (35, '<'): ('BooleanAtomicFormula', 1),
        (35, 'U'): ('BooleanAtomicFormula', 1),
        (35, 'W'): ('BooleanAtomicFormula', 1),
        (35, '\\'): ('BooleanAtomicFormula', 1),
        (35, ']'): ('BooleanAtomicFormula', 1),
        (35, '^'): ('BooleanAtomicFormula', 1),
        (35, '|'): ('BooleanAtomicFormula', 1), (36, EOF): ('Assignment', 1),
        (36, '&'): ('Assignment', 1), (36, ')'): ('Assignment', 1),
        (36, '-'): ('Assignment', 1), (36, '/'): ('Assignment', 1),
        (36, '<'): ('Assignment', 1), (36, 'U'): ('Assignment', 1),
        (36, 'W'): ('Assignment', 1), (36, '\\'): ('Assignment', 1),
        (36, ']'): ('Assignment', 1), (36, '^'): ('Assignment', 1),
        (36, '|'): ('Assignment', 1), (40, EOF): ('CalculationSubformula', 3),
        (40, '&'): ('CalculationSubformula', 3),
        (40, ')'): ('CalculationSubformula', 3),
        (40, '-'): ('CalculationSubformula', 3),
        (40, '/'): ('CalculationSubformula', 3),
        (40, '<'): ('CalculationSubformula', 3),
        (40, 'U'): ('CalculationSubformula', 3),
        (40, 'W'): ('CalculationSubformula', 3),
        (40, '\\'): ('CalculationSubformula', 3),
        (40, ']'): ('CalculationSubformula', 3),
        (40, '^'): ('CalculationSubformula', 3),
        (40, '|'): ('CalculationSubformula', 3),
        (41, EOF): ('NumberExpression', 1), (41, '!'): ('NumberExpression', 1),
        (41, '&'): ('NumberExpression', 1), (41, ')'): ('NumberExpression', 1),
        (41, '-'): ('NumberExpression', 1), (41, '/'): ('NumberExpression', 1),
        (41, '<'): ('NumberExpression', 1), (41, '='): ('NumberExpression', 1),
        (41, '>'): ('NumberExpression', 1), (41, 'U'): ('NumberExpression', 1),
        (41, 'W'): ('NumberExpression', 1),
        (41, '\\'): ('NumberExpression', 1),
        (41, ']'): ('NumberExpression', 1), (41, '^'): ('NumberExpression', 1),
        (41, '|'): ('NumberExpression', 1), (43, EOF): ('NumberExpression', 3),
        (43, '!'): ('NumberExpression', 3), (43, '&'): ('NumberExpression', 3),
        (43, ')'): ('NumberExpression', 3), (43, '-'): ('NumberExpression', 3),
        (43, '/'): ('NumberExpression', 3), (43, '<'): ('NumberExpression', 3),
        (43, '='): ('NumberExpression', 3), (43, '>'): ('NumberExpression', 3),
        (43, 'U'): ('NumberExpression', 3), (43, 'W'): ('NumberExpression', 3),
        (43, '\\'): ('NumberExpression', 3),
        (43, ']'): ('NumberExpression', 3), (43, '^'): ('NumberExpression', 3),
        (43, '|'): ('NumberExpression', 3), (45, EOF): ('NumberExpression', 3),
        (45, '!'): ('NumberExpression', 3), (45, '&'): ('NumberExpression', 3),
        (45, ')'): ('NumberExpression', 3), (45, '-'): ('NumberExpression', 3),
        (45, '/'): ('NumberExpression', 3), (45, '<'): ('NumberExpression', 3),
        (45, '='): ('NumberExpression', 3), (45, '>'): ('NumberExpression', 3),
        (45, 'U'): ('NumberExpression', 3), (45, 'W'): ('NumberExpression', 3),
        (45, '\\'): ('NumberExpression', 3),
        (45, ']'): ('NumberExpression', 3), (45, '^'): ('NumberExpression', 3),
        (45, '|'): ('NumberExpression', 3),
        (46, EOF): ('MultiplicativeNumber', 1),
        (46, '!'): ('MultiplicativeNumber', 1),
        (46, '&'): ('MultiplicativeNumber', 1),
        (46, ')'): ('MultiplicativeNumber', 1),
        (46, '+'): ('MultiplicativeNumber', 1),
        (46, '-'): ('MultiplicativeNumber', 1),
        (46, '/'): ('MultiplicativeNumber', 1),
        (46, '<'): ('MultiplicativeNumber', 1),
        (46, '='): ('MultiplicativeNumber', 1),
        (46, '>'): ('MultiplicativeNumber', 1),
        (46, 'SubtractionOperator'): ('MultiplicativeNumber', 1),
        (46, 'U'): ('MultiplicativeNumber', 1),
        (46, 'W'): ('MultiplicativeNumber', 1),
        (46, '\\'): ('MultiplicativeNumber', 1),
        (46, ']'): ('MultiplicativeNumber', 1),
        (46, '^'): ('MultiplicativeNumber', 1),
        (46, '|'): ('MultiplicativeNumber', 1),
        (48, EOF): ('MultiplicativeNumber', 3),
        (48, '!'): ('MultiplicativeNumber', 3),
        (48, '&'): ('MultiplicativeNumber', 3),
        (48, ')'): ('MultiplicativeNumber', 3),
        (48, '+'): ('MultiplicativeNumber', 3),
        (48, '-'): ('MultiplicativeNumber', 3),
        (48, '/'): ('MultiplicativeNumber', 3),
        (48, '<'): ('MultiplicativeNumber', 3),
        (48, '='): ('MultiplicativeNumber', 3),
        (48, '>'): ('MultiplicativeNumber', 3),
        (48, 'SubtractionOperator'): ('MultiplicativeNumber', 3),
        (48, 'U'): ('MultiplicativeNumber', 3),
        (48, 'W'): ('MultiplicativeNumber', 3),
        (48, '\\'): ('MultiplicativeNumber', 3),
        (48, ']'): ('MultiplicativeNumber', 3),
        (48, '^'): ('MultiplicativeNumber', 3),
        (48, '|'): ('MultiplicativeNumber', 3),
        (49, EOF): ('AtomicNumberExpression', 1),
        (49, '!'): ('AtomicNumberExpression', 1),
        (49, '&'): ('AtomicNumberExpression', 1),
        (49, ')'): ('AtomicNumberExpression', 1),
        (49, '*'): ('AtomicNumberExpression', 1),
        (49, '+'): ('AtomicNumberExpression', 1),
        (49, '-'): ('AtomicNumberExpression', 1),
        (49, '/'): ('AtomicNumberExpression', 1),
        (49, '<'): ('AtomicNumberExpression', 1),
        (49, '='): ('AtomicNumberExpression', 1),
        (49, '>'): ('AtomicNumberExpression', 1),
        (49, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (49, 'U'): ('AtomicNumberExpression', 1),
        (49, 'W'): ('AtomicNumberExpression', 1),
        (49, '\\'): ('AtomicNumberExpression', 1),
        (49, ']'): ('AtomicNumberExpression', 1),
        (49, '^'): ('AtomicNumberExpression', 1),
        (49, '|'): ('AtomicNumberExpression', 1),
        (50, EOF): ('AtomicNumberExpression', 1),
        (50, '!'): ('AtomicNumberExpression', 1),
        (50, '&'): ('AtomicNumberExpression', 1),
        (50, ')'): ('AtomicNumberExpression', 1),
        (50, '*'): ('AtomicNumberExpression', 1),
        (50, '+'): ('AtomicNumberExpression', 1),
        (50, '-'): ('AtomicNumberExpression', 1),
        (50, '/'): ('AtomicNumberExpression', 1),
        (50, '<'): ('AtomicNumberExpression', 1),
        (50, '='): ('AtomicNumberExpression', 1),
        (50, '>'): ('AtomicNumberExpression', 1),
        (50, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (50, 'U'): ('AtomicNumberExpression', 1),
        (50, 'W'): ('AtomicNumberExpression', 1),
        (50, '\\'): ('AtomicNumberExpression', 1),
        (50, ']'): ('AtomicNumberExpression', 1),
        (50, '^'): ('AtomicNumberExpression', 1),
        (50, '|'): ('AtomicNumberExpression', 1),
        (51, EOF): ('AtomicNumberExpression', 1),
        (51, '!'): ('AtomicNumberExpression', 1),
        (51, '&'): ('AtomicNumberExpression', 1),
        (51, ')'): ('AtomicNumberExpression', 1),
        (51, '*'): ('AtomicNumberExpression', 1),
        (51, '+'): ('AtomicNumberExpression', 1),
        (51, '-'): ('AtomicNumberExpression', 1),
        (51, '/'): ('AtomicNumberExpression', 1),
        (51, '<'): ('AtomicNumberExpression', 1),
        (51, '='): ('AtomicNumberExpression', 1),
        (51, '>'): ('AtomicNumberExpression', 1),
        (51, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (51, 'U'): ('AtomicNumberExpression', 1),
        (51, 'W'): ('AtomicNumberExpression', 1),
        (51, '\\'): ('AtomicNumberExpression', 1),
        (51, ']'): ('AtomicNumberExpression', 1),
        (51, '^'): ('AtomicNumberExpression', 1),
        (51, '|'): ('AtomicNumberExpression', 1),
        (54, EOF): ('NumberBrackets', 3), (54, '!'): ('NumberBrackets', 3),
        (54, '&'): ('NumberBrackets', 3), (54, ')'): ('NumberBrackets', 3),
        (54, '*'): ('NumberBrackets', 3), (54, '+'): ('NumberBrackets', 3),
        (54, '-'): ('NumberBrackets', 3), (54, '/'): ('NumberBrackets', 3),
        (54, '<'): ('NumberBrackets', 3), (54, '='): ('NumberBrackets', 3),
        (54, '>'): ('NumberBrackets', 3),
        (54, 'SubtractionOperator'): ('NumberBrackets', 3),
        (54, 'U'): ('NumberBrackets', 3), (54, 'W'): ('NumberBrackets', 3),
        (54, '\\'): ('NumberBrackets', 3), (54, ']'): ('NumberBrackets', 3),
        (54, '^'): ('NumberBrackets', 3), (54, '|'): ('NumberBrackets', 3),
        (55, '!'): ('BinaryTemporalOperator', 1),
        (55, '('): ('BinaryTemporalOperator', 1),
        (55, '<'): ('BinaryTemporalOperator', 1),
        (55, 'F'): ('BinaryTemporalOperator', 1),
        (55, 'FALSE'): ('BinaryTemporalOperator', 1),
        (55, 'G'): ('BinaryTemporalOperator', 1),
        (55, 'TRUE'): ('BinaryTemporalOperator', 1),
        (55, 'X'): ('BinaryTemporalOperator', 1),
        (55, '['): ('BinaryTemporalOperator', 1),
        (55, 'boolID'): ('BinaryTemporalOperator', 1),
        (55, 'next'): ('BinaryTemporalOperator', 1),
        (55, 'numID'): ('BinaryTemporalOperator', 1),
        (55, 'numeral'): ('BinaryTemporalOperator', 1),
        (55, '~'): ('BinaryTemporalOperator', 1),
        (56, '!'): ('BinaryTemporalOperator', 1),
        (56, '('): ('BinaryTemporalOperator', 1),
        (56, '<'): ('BinaryTemporalOperator', 1),
        (56, 'F'): ('BinaryTemporalOperator', 1),
        (56, 'FALSE'): ('BinaryTemporalOperator', 1),
        (56, 'G'): ('BinaryTemporalOperator', 1),
        (56, 'TRUE'): ('BinaryTemporalOperator', 1),
        (56, 'X'): ('BinaryTemporalOperator', 1),
        (56, '['): ('BinaryTemporalOperator', 1),
        (56, 'boolID'): ('BinaryTemporalOperator', 1),
        (56, 'next'): ('BinaryTemporalOperator', 1),
        (56, 'numID'): ('BinaryTemporalOperator', 1),
        (56, 'numeral'): ('BinaryTemporalOperator', 1),
        (56, '~'): ('BinaryTemporalOperator', 1),
        (57, '!'): ('UntilOperator', 1), (57, '('): ('UntilOperator', 1),
        (57, '<'): ('UntilOperator', 1), (57, 'F'): ('UntilOperator', 1),
        (57, 'FALSE'): ('UntilOperator', 1), (57, 'G'): ('UntilOperator', 1),
        (57, 'TRUE'): ('UntilOperator', 1), (57, 'X'): ('UntilOperator', 1),
        (57, '['): ('UntilOperator', 1), (57, 'boolID'): ('UntilOperator', 1),
        (57, 'next'): ('UntilOperator', 1),
        (57, 'numID'): ('UntilOperator', 1),
        (57, 'numeral'): ('UntilOperator', 1), (57, '~'): ('UntilOperator', 1),
        (58, '!'): ('WeakUntilOperator', 1),
        (58, '('): ('WeakUntilOperator', 1),
        (58, '<'): ('WeakUntilOperator', 1),
        (58, 'F'): ('WeakUntilOperator', 1),
        (58, 'FALSE'): ('WeakUntilOperator', 1),
        (58, 'G'): ('WeakUntilOperator', 1),
        (58, 'TRUE'): ('WeakUntilOperator', 1),
        (58, 'X'): ('WeakUntilOperator', 1),
        (58, '['): ('WeakUntilOperator', 1),
        (58, 'boolID'): ('WeakUntilOperator', 1),
        (58, 'next'): ('WeakUntilOperator', 1),
        (58, 'numID'): ('WeakUntilOperator', 1),
        (58, 'numeral'): ('WeakUntilOperator', 1),
        (58, '~'): ('WeakUntilOperator', 1),
        (61, '!'): ('ImplicationOperator', 3),
        (61, '('): ('ImplicationOperator', 3),
        (61, '<'): ('ImplicationOperator', 3),
        (61, 'F'): ('ImplicationOperator', 3),
        (61, 'FALSE'): ('ImplicationOperator', 3),
        (61, 'G'): ('ImplicationOperator', 3),
        (61, 'TRUE'): ('ImplicationOperator', 3),
        (61, 'X'): ('ImplicationOperator', 3),
        (61, '['): ('ImplicationOperator', 3),
        (61, 'boolID'): ('ImplicationOperator', 3),
        (61, 'next'): ('ImplicationOperator', 3),
        (61, 'numID'): ('ImplicationOperator', 3),
        (61, 'numeral'): ('ImplicationOperator', 3),
        (61, '~'): ('ImplicationOperator', 3),
        (62, '!'): ('ImplicationOperator', 2),
        (62, '('): ('ImplicationOperator', 2),
        (62, '<'): ('ImplicationOperator', 2),
        (62, 'F'): ('ImplicationOperator', 2),
        (62, 'FALSE'): ('ImplicationOperator', 2),
        (62, 'G'): ('ImplicationOperator', 2),
        (62, 'TRUE'): ('ImplicationOperator', 2),
        (62, 'X'): ('ImplicationOperator', 2),
        (62, '['): ('ImplicationOperator', 2),
        (62, 'boolID'): ('ImplicationOperator', 2),
        (62, 'next'): ('ImplicationOperator', 2),
        (62, 'numID'): ('ImplicationOperator', 2),
        (62, 'numeral'): ('ImplicationOperator', 2),
        (62, '~'): ('ImplicationOperator', 2),
        (66, '!'): ('BiimplicationOperator', 4),
        (66, '('): ('BiimplicationOperator', 4),
        (66, '<'): ('BiimplicationOperator', 4),
        (66, 'F'): ('BiimplicationOperator', 4),
        (66, 'FALSE'): ('BiimplicationOperator', 4),
        (66, 'G'): ('BiimplicationOperator', 4),
        (66, 'TRUE'): ('BiimplicationOperator', 4),
        (66, 'X'): ('BiimplicationOperator', 4),
        (66, '['): ('BiimplicationOperator', 4),
        (66, 'boolID'): ('BiimplicationOperator', 4),
        (66, 'next'): ('BiimplicationOperator', 4),
        (66, 'numID'): ('BiimplicationOperator', 4),
        (66, 'numeral'): ('BiimplicationOperator', 4),
        (66, '~'): ('BiimplicationOperator', 4),
        (67, '!'): ('BiimplicationOperator', 3),
        (67, '('): ('BiimplicationOperator', 3),
        (67, '<'): ('BiimplicationOperator', 3),
        (67, 'F'): ('BiimplicationOperator', 3),
        (67, 'FALSE'): ('BiimplicationOperator', 3),
        (67, 'G'): ('BiimplicationOperator', 3),
        (67, 'TRUE'): ('BiimplicationOperator', 3),
        (67, 'X'): ('BiimplicationOperator', 3),
        (67, '['): ('BiimplicationOperator', 3),
        (67, 'boolID'): ('BiimplicationOperator', 3),
        (67, 'next'): ('BiimplicationOperator', 3),
        (67, 'numID'): ('BiimplicationOperator', 3),
        (67, 'numeral'): ('BiimplicationOperator', 3),
        (67, '~'): ('BiimplicationOperator', 3),
        (69, '!'): ('DisjunctionOperator', 2),
        (69, '('): ('DisjunctionOperator', 2),
        (69, '<'): ('DisjunctionOperator', 2),
        (69, 'F'): ('DisjunctionOperator', 2),
        (69, 'FALSE'): ('DisjunctionOperator', 2),
        (69, 'G'): ('DisjunctionOperator', 2),
        (69, 'TRUE'): ('DisjunctionOperator', 2),
        (69, 'X'): ('DisjunctionOperator', 2),
        (69, '['): ('DisjunctionOperator', 2),
        (69, 'boolID'): ('DisjunctionOperator', 2),
        (69, 'next'): ('DisjunctionOperator', 2),
        (69, 'numID'): ('DisjunctionOperator', 2),
        (69, 'numeral'): ('DisjunctionOperator', 2),
        (69, '~'): ('DisjunctionOperator', 2),
        (70, '!'): ('DisjunctionOperator', 1),
        (70, '('): ('DisjunctionOperator', 1),
        (70, '<'): ('DisjunctionOperator', 1),
        (70, 'F'): ('DisjunctionOperator', 1),
        (70, 'FALSE'): ('DisjunctionOperator', 1),
        (70, 'G'): ('DisjunctionOperator', 1),
        (70, 'TRUE'): ('DisjunctionOperator', 1),
        (70, 'X'): ('DisjunctionOperator', 1),
        (70, '['): ('DisjunctionOperator', 1),
        (70, 'boolID'): ('DisjunctionOperator', 1),
        (70, 'next'): ('DisjunctionOperator', 1),
        (70, 'numID'): ('DisjunctionOperator', 1),
        (70, 'numeral'): ('DisjunctionOperator', 1),
        (70, '~'): ('DisjunctionOperator', 1),
        (71, '!'): ('DisjunctionOperator', 2),
        (71, '('): ('DisjunctionOperator', 2),
        (71, '<'): ('DisjunctionOperator', 2),
        (71, 'F'): ('DisjunctionOperator', 2),
        (71, 'FALSE'): ('DisjunctionOperator', 2),
        (71, 'G'): ('DisjunctionOperator', 2),
        (71, 'TRUE'): ('DisjunctionOperator', 2),
        (71, 'X'): ('DisjunctionOperator', 2),
        (71, '['): ('DisjunctionOperator', 2),
        (71, 'boolID'): ('DisjunctionOperator', 2),
        (71, 'next'): ('DisjunctionOperator', 2),
        (71, 'numID'): ('DisjunctionOperator', 2),
        (71, 'numeral'): ('DisjunctionOperator', 2),
        (71, '~'): ('DisjunctionOperator', 2),
        (73, '!'): ('ConjunctionOperator', 2),
        (73, '('): ('ConjunctionOperator', 2),
        (73, '<'): ('ConjunctionOperator', 2),
        (73, 'F'): ('ConjunctionOperator', 2),
        (73, 'FALSE'): ('ConjunctionOperator', 2),
        (73, 'G'): ('ConjunctionOperator', 2),
        (73, 'TRUE'): ('ConjunctionOperator', 2),
        (73, 'X'): ('ConjunctionOperator', 2),
        (73, '['): ('ConjunctionOperator', 2),
        (73, 'boolID'): ('ConjunctionOperator', 2),
        (73, 'next'): ('ConjunctionOperator', 2),
        (73, 'numID'): ('ConjunctionOperator', 2),
        (73, 'numeral'): ('ConjunctionOperator', 2),
        (73, '~'): ('ConjunctionOperator', 2),
        (74, '!'): ('ConjunctionOperator', 1),
        (74, '('): ('ConjunctionOperator', 1),
        (74, '<'): ('ConjunctionOperator', 1),
        (74, 'F'): ('ConjunctionOperator', 1),
        (74, 'FALSE'): ('ConjunctionOperator', 1),
        (74, 'G'): ('ConjunctionOperator', 1),
        (74, 'TRUE'): ('ConjunctionOperator', 1),
        (74, 'X'): ('ConjunctionOperator', 1),
        (74, '['): ('ConjunctionOperator', 1),
        (74, 'boolID'): ('ConjunctionOperator', 1),
        (74, 'next'): ('ConjunctionOperator', 1),
        (74, 'numID'): ('ConjunctionOperator', 1),
        (74, 'numeral'): ('ConjunctionOperator', 1),
        (74, '~'): ('ConjunctionOperator', 1),
        (75, '!'): ('ConjunctionOperator', 2),
        (75, '('): ('ConjunctionOperator', 2),
        (75, '<'): ('ConjunctionOperator', 2),
        (75, 'F'): ('ConjunctionOperator', 2),
        (75, 'FALSE'): ('ConjunctionOperator', 2),
        (75, 'G'): ('ConjunctionOperator', 2),
        (75, 'TRUE'): ('ConjunctionOperator', 2),
        (75, 'X'): ('ConjunctionOperator', 2),
        (75, '['): ('ConjunctionOperator', 2),
        (75, 'boolID'): ('ConjunctionOperator', 2),
        (75, 'next'): ('ConjunctionOperator', 2),
        (75, 'numID'): ('ConjunctionOperator', 2),
        (75, 'numeral'): ('ConjunctionOperator', 2),
        (75, '~'): ('ConjunctionOperator', 2),
        (76, '('): ('NumberComparisonOperator', 1),
        (76, 'numID'): ('NumberComparisonOperator', 1),
        (76, 'numeral'): ('NumberComparisonOperator', 1),
        (77, '('): ('NumberComparisonOperator', 1),
        (77, 'numID'): ('NumberComparisonOperator', 1),
        (77, 'numeral'): ('NumberComparisonOperator', 1),
        (78, '('): ('NumberComparisonOperator', 1),
        (78, 'numID'): ('NumberComparisonOperator', 1),
        (78, 'numeral'): ('NumberComparisonOperator', 1),
        (79, '('): ('NumberComparisonOperator', 1),
        (79, 'numID'): ('NumberComparisonOperator', 1),
        (79, 'numeral'): ('NumberComparisonOperator', 1),
        (80, '('): ('NumberComparisonOperator', 1),
        (80, 'numID'): ('NumberComparisonOperator', 1),
        (80, 'numeral'): ('NumberComparisonOperator', 1),
        (81, '('): ('NumberComparisonOperator', 1),
        (81, 'numID'): ('NumberComparisonOperator', 1),
        (81, 'numeral'): ('NumberComparisonOperator', 1),
        (82, '('): ('GreaterOperator', 1),
        (82, 'numID'): ('GreaterOperator', 1),
        (82, 'numeral'): ('GreaterOperator', 1),
        (83, '('): ('SmallerOperator', 1),
        (83, 'numID'): ('SmallerOperator', 1),
        (83, 'numeral'): ('SmallerOperator', 1),
        (84, '('): ('EqualOperator', 1), (84, 'numID'): ('EqualOperator', 1),
        (84, 'numeral'): ('EqualOperator', 1),
        (86, '('): ('UnequalOperator', 2),
        (86, 'numID'): ('UnequalOperator', 2),
        (86, 'numeral'): ('UnequalOperator', 2),
        (87, '('): ('SmallerEqualOperator', 2),
        (87, 'numID'): ('SmallerEqualOperator', 2),
        (87, 'numeral'): ('SmallerEqualOperator', 2),
        (88, '('): ('GreaterEqualOperator', 2),
        (88, 'numID'): ('GreaterEqualOperator', 2),
        (88, 'numeral'): ('GreaterEqualOperator', 2),
        (89, '('): ('AdditionOperator', 1),
        (89, 'numID'): ('AdditionOperator', 1),
        (89, 'numeral'): ('AdditionOperator', 1),
        (90, '('): ('MultiplicationOperator', 1),
        (90, 'numID'): ('MultiplicationOperator', 1),
        (90, 'numeral'): ('MultiplicationOperator', 1),
        (91, '!'): ('XorOperator', 1), (91, '('): ('XorOperator', 1),
        (91, '<'): ('XorOperator', 1), (91, 'F'): ('XorOperator', 1),
        (91, 'FALSE'): ('XorOperator', 1), (91, 'G'): ('XorOperator', 1),
        (91, 'TRUE'): ('XorOperator', 1), (91, 'X'): ('XorOperator', 1),
        (91, '['): ('XorOperator', 1), (91, 'boolID'): ('XorOperator', 1),
        (91, 'next'): ('XorOperator', 1), (91, 'numID'): ('XorOperator', 1),
        (91, 'numeral'): ('XorOperator', 1), (91, '~'): ('XorOperator', 1),
        (92, '!'): ('UnaryTemporalOperator', 1),
        (92, '('): ('UnaryTemporalOperator', 1),
        (92, '<'): ('UnaryTemporalOperator', 1),
        (92, 'F'): ('UnaryTemporalOperator', 1),
        (92, 'FALSE'): ('UnaryTemporalOperator', 1),
        (92, 'G'): ('UnaryTemporalOperator', 1),
        (92, 'TRUE'): ('UnaryTemporalOperator', 1),
        (92, 'X'): ('UnaryTemporalOperator', 1),
        (92, '['): ('UnaryTemporalOperator', 1),
        (92, 'boolID'): ('UnaryTemporalOperator', 1),
        (92, 'next'): ('UnaryTemporalOperator', 1),
        (92, 'numID'): ('UnaryTemporalOperator', 1),
        (92, 'numeral'): ('UnaryTemporalOperator', 1),
        (92, '~'): ('UnaryTemporalOperator', 1),
        (93, '!'): ('UnaryTemporalOperator', 1),
        (93, '('): ('UnaryTemporalOperator', 1),
        (93, '<'): ('UnaryTemporalOperator', 1),
        (93, 'F'): ('UnaryTemporalOperator', 1),
        (93, 'FALSE'): ('UnaryTemporalOperator', 1),
        (93, 'G'): ('UnaryTemporalOperator', 1),
        (93, 'TRUE'): ('UnaryTemporalOperator', 1),
        (93, 'X'): ('UnaryTemporalOperator', 1),
        (93, '['): ('UnaryTemporalOperator', 1),
        (93, 'boolID'): ('UnaryTemporalOperator', 1),
        (93, 'next'): ('UnaryTemporalOperator', 1),
        (93, 'numID'): ('UnaryTemporalOperator', 1),
        (93, 'numeral'): ('UnaryTemporalOperator', 1),
        (93, '~'): ('UnaryTemporalOperator', 1),
        (94, '!'): ('UnaryTemporalOperator', 1),
        (94, '('): ('UnaryTemporalOperator', 1),
        (94, '<'): ('UnaryTemporalOperator', 1),
        (94, 'F'): ('UnaryTemporalOperator', 1),
        (94, 'FALSE'): ('UnaryTemporalOperator', 1),
        (94, 'G'): ('UnaryTemporalOperator', 1),
        (94, 'TRUE'): ('UnaryTemporalOperator', 1),
        (94, 'X'): ('UnaryTemporalOperator', 1),
        (94, '['): ('UnaryTemporalOperator', 1),
        (94, 'boolID'): ('UnaryTemporalOperator', 1),
        (94, 'next'): ('UnaryTemporalOperator', 1),
        (94, 'numID'): ('UnaryTemporalOperator', 1),
        (94, 'numeral'): ('UnaryTemporalOperator', 1),
        (94, '~'): ('UnaryTemporalOperator', 1),
        (95, '!'): ('UnaryTemporalOperator', 1),
        (95, '('): ('UnaryTemporalOperator', 1),
        (95, '<'): ('UnaryTemporalOperator', 1),
        (95, 'F'): ('UnaryTemporalOperator', 1),
        (95, 'FALSE'): ('UnaryTemporalOperator', 1),
        (95, 'G'): ('UnaryTemporalOperator', 1),
        (95, 'TRUE'): ('UnaryTemporalOperator', 1),
        (95, 'X'): ('UnaryTemporalOperator', 1),
        (95, '['): ('UnaryTemporalOperator', 1),
        (95, 'boolID'): ('UnaryTemporalOperator', 1),
        (95, 'next'): ('UnaryTemporalOperator', 1),
        (95, 'numID'): ('UnaryTemporalOperator', 1),
        (95, 'numeral'): ('UnaryTemporalOperator', 1),
        (95, '~'): ('UnaryTemporalOperator', 1),
        (97, '!'): ('FinallyOperator', 2), (97, '('): ('FinallyOperator', 2),
        (97, '<'): ('FinallyOperator', 2), (97, 'F'): ('FinallyOperator', 2),
        (97, 'FALSE'): ('FinallyOperator', 2),
        (97, 'G'): ('FinallyOperator', 2),
        (97, 'TRUE'): ('FinallyOperator', 2),
        (97, 'X'): ('FinallyOperator', 2), (97, '['): ('FinallyOperator', 2),
        (97, 'boolID'): ('FinallyOperator', 2),
        (97, 'next'): ('FinallyOperator', 2),
        (97, 'numID'): ('FinallyOperator', 2),
        (97, 'numeral'): ('FinallyOperator', 2),
        (97, '~'): ('FinallyOperator', 2), (98, '!'): ('FinallyOperator', 1),
        (98, '('): ('FinallyOperator', 1), (98, '<'): ('FinallyOperator', 1),
        (98, 'F'): ('FinallyOperator', 1),
        (98, 'FALSE'): ('FinallyOperator', 1),
        (98, 'G'): ('FinallyOperator', 1),
        (98, 'TRUE'): ('FinallyOperator', 1),
        (98, 'X'): ('FinallyOperator', 1), (98, '['): ('FinallyOperator', 1),
        (98, 'boolID'): ('FinallyOperator', 1),
        (98, 'next'): ('FinallyOperator', 1),
        (98, 'numID'): ('FinallyOperator', 1),
        (98, 'numeral'): ('FinallyOperator', 1),
        (98, '~'): ('FinallyOperator', 1), (99, '!'): ('NextOperator', 2),
        (99, '('): ('NextOperator', 2), (99, '<'): ('NextOperator', 2),
        (99, 'F'): ('NextOperator', 2), (99, 'FALSE'): ('NextOperator', 2),
        (99, 'G'): ('NextOperator', 2), (99, 'TRUE'): ('NextOperator', 2),
        (99, 'X'): ('NextOperator', 2), (99, '['): ('NextOperator', 2),
        (99, 'boolID'): ('NextOperator', 2), (99, 'next'): ('NextOperator', 2),
        (99, 'numID'): ('NextOperator', 2),
        (99, 'numeral'): ('NextOperator', 2), (99, '~'): ('NextOperator', 2),
        (100, '!'): ('NextOperator', 1), (100, '('): ('NextOperator', 1),
        (100, '<'): ('NextOperator', 1), (100, 'F'): ('NextOperator', 1),
        (100, 'FALSE'): ('NextOperator', 1), (100, 'G'): ('NextOperator', 1),
        (100, 'TRUE'): ('NextOperator', 1), (100, 'X'): ('NextOperator', 1),
        (100, '['): ('NextOperator', 1), (100, 'boolID'): ('NextOperator', 1),
        (100, 'next'): ('NextOperator', 1),
        (100, 'numID'): ('NextOperator', 1),
        (100, 'numeral'): ('NextOperator', 1), (100, '~'): ('NextOperator', 1),
        (101, '!'): ('NextOperator', 1), (101, '('): ('NextOperator', 1),
        (101, '<'): ('NextOperator', 1), (101, 'F'): ('NextOperator', 1),
        (101, 'FALSE'): ('NextOperator', 1), (101, 'G'): ('NextOperator', 1),
        (101, 'TRUE'): ('NextOperator', 1), (101, 'X'): ('NextOperator', 1),
        (101, '['): ('NextOperator', 1), (101, 'boolID'): ('NextOperator', 1),
        (101, 'next'): ('NextOperator', 1),
        (101, 'numID'): ('NextOperator', 1),
        (101, 'numeral'): ('NextOperator', 1), (101, '~'): ('NextOperator', 1),
        (102, '!'): ('GloballyOperator', 2),
        (102, '('): ('GloballyOperator', 2),
        (102, '<'): ('GloballyOperator', 2),
        (102, 'F'): ('GloballyOperator', 2),
        (102, 'FALSE'): ('GloballyOperator', 2),
        (102, 'G'): ('GloballyOperator', 2),
        (102, 'TRUE'): ('GloballyOperator', 2),
        (102, 'X'): ('GloballyOperator', 2),
        (102, '['): ('GloballyOperator', 2),
        (102, 'boolID'): ('GloballyOperator', 2),
        (102, 'next'): ('GloballyOperator', 2),
        (102, 'numID'): ('GloballyOperator', 2),
        (102, 'numeral'): ('GloballyOperator', 2),
        (102, '~'): ('GloballyOperator', 2),
        (103, '!'): ('GloballyOperator', 1),
        (103, '('): ('GloballyOperator', 1),
        (103, '<'): ('GloballyOperator', 1),
        (103, 'F'): ('GloballyOperator', 1),
        (103, 'FALSE'): ('GloballyOperator', 1),
        (103, 'G'): ('GloballyOperator', 1),
        (103, 'TRUE'): ('GloballyOperator', 1),
        (103, 'X'): ('GloballyOperator', 1),
        (103, '['): ('GloballyOperator', 1),
        (103, 'boolID'): ('GloballyOperator', 1),
        (103, 'next'): ('GloballyOperator', 1),
        (103, 'numID'): ('GloballyOperator', 1),
        (103, 'numeral'): ('GloballyOperator', 1),
        (103, '~'): ('GloballyOperator', 1), (104, '!'): ('NotOperator', 1),
        (104, '('): ('NotOperator', 1), (104, '<'): ('NotOperator', 1),
        (104, 'F'): ('NotOperator', 1), (104, 'FALSE'): ('NotOperator', 1),
        (104, 'G'): ('NotOperator', 1), (104, 'TRUE'): ('NotOperator', 1),
        (104, 'X'): ('NotOperator', 1), (104, '['): ('NotOperator', 1),
        (104, 'boolID'): ('NotOperator', 1), (104, 'next'): ('NotOperator', 1),
        (104, 'numID'): ('NotOperator', 1),
        (104, 'numeral'): ('NotOperator', 1), (104, '~'): ('NotOperator', 1),
        (105, '!'): ('NotOperator', 1), (105, '('): ('NotOperator', 1),
        (105, '<'): ('NotOperator', 1), (105, 'F'): ('NotOperator', 1),
        (105, 'FALSE'): ('NotOperator', 1), (105, 'G'): ('NotOperator', 1),
        (105, 'TRUE'): ('NotOperator', 1), (105, 'X'): ('NotOperator', 1),
        (105, '['): ('NotOperator', 1), (105, 'boolID'): ('NotOperator', 1),
        (105, 'next'): ('NotOperator', 1), (105, 'numID'): ('NotOperator', 1),
        (105, 'numeral'): ('NotOperator', 1), (105, '~'): ('NotOperator', 1)
    }
    _goto = {
        (0, 'Assignment'): 34, (0, 'AtomicFormula'): 23,
        (0, 'AtomicNumberExpression'): 46, (0, 'Biimplication'): 2,
        (0, 'BinaryTemporalFormula'): 17, (0, 'BooleanAtomicFormula'): 29,
        (0, 'Brackets'): 28, (0, 'CalculationSubformula'): 35,
        (0, 'Conjunction'): 14, (0, 'Disjunction'): 11,
        (0, 'FinallyOperator'): 92, (0, 'Formula'): 1,
        (0, 'GloballyOperator'): 94, (0, 'Implication'): 3,
        (0, 'MultiplicativeNumber'): 41, (0, 'NextOperator'): 93,
        (0, 'NotOperator'): 95, (0, 'NumberBrackets'): 51,
        (0, 'NumberExpression'): 37, (0, 'UnaryFormula'): 20,
        (0, 'UnaryTemporalOperator'): 24, (0, 'Xor'): 8,
        (2, 'BiimplicationOperator'): 6, (3, 'ImplicationOperator'): 9,
        (4, 'BiimplicationOperator'): 6, (5, 'BiimplicationOperator'): 6,
        (6, 'Assignment'): 34, (6, 'AtomicFormula'): 23,
        (6, 'AtomicNumberExpression'): 46, (6, 'BinaryTemporalFormula'): 17,
        (6, 'BooleanAtomicFormula'): 29, (6, 'Brackets'): 28,
        (6, 'CalculationSubformula'): 35, (6, 'Conjunction'): 14,
        (6, 'Disjunction'): 11, (6, 'FinallyOperator'): 92,
        (6, 'GloballyOperator'): 94, (6, 'Implication'): 7,
        (6, 'MultiplicativeNumber'): 41, (6, 'NextOperator'): 93,
        (6, 'NotOperator'): 95, (6, 'NumberBrackets'): 51,
        (6, 'NumberExpression'): 37, (6, 'UnaryFormula'): 20,
        (6, 'UnaryTemporalOperator'): 24, (6, 'Xor'): 8,
        (7, 'ImplicationOperator'): 9, (8, 'XorOperator'): 12,
        (9, 'Assignment'): 34, (9, 'AtomicFormula'): 23,
        (9, 'AtomicNumberExpression'): 46, (9, 'BinaryTemporalFormula'): 17,
        (9, 'BooleanAtomicFormula'): 29, (9, 'Brackets'): 28,
        (9, 'CalculationSubformula'): 35, (9, 'Conjunction'): 14,
        (9, 'Disjunction'): 11, (9, 'FinallyOperator'): 92,
        (9, 'GloballyOperator'): 94, (9, 'MultiplicativeNumber'): 41,
        (9, 'NextOperator'): 93, (9, 'NotOperator'): 95,
        (9, 'NumberBrackets'): 51, (9, 'NumberExpression'): 37,
        (9, 'UnaryFormula'): 20, (9, 'UnaryTemporalOperator'): 24,
        (9, 'Xor'): 10, (10, 'XorOperator'): 12,
        (11, 'DisjunctionOperator'): 15, (12, 'Assignment'): 34,
        (12, 'AtomicFormula'): 23, (12, 'AtomicNumberExpression'): 46,
        (12, 'BinaryTemporalFormula'): 17, (12, 'BooleanAtomicFormula'): 29,
        (12, 'Brackets'): 28, (12, 'CalculationSubformula'): 35,
        (12, 'Conjunction'): 14, (12, 'Disjunction'): 13,
        (12, 'FinallyOperator'): 92, (12, 'GloballyOperator'): 94,
        (12, 'MultiplicativeNumber'): 41, (12, 'NextOperator'): 93,
        (12, 'NotOperator'): 95, (12, 'NumberBrackets'): 51,
        (12, 'NumberExpression'): 37, (12, 'UnaryFormula'): 20,
        (12, 'UnaryTemporalOperator'): 24, (13, 'DisjunctionOperator'): 15,
        (14, 'ConjunctionOperator'): 18, (15, 'Assignment'): 34,
        (15, 'AtomicFormula'): 23, (15, 'AtomicNumberExpression'): 46,
        (15, 'BinaryTemporalFormula'): 17, (15, 'BooleanAtomicFormula'): 29,
        (15, 'Brackets'): 28, (15, 'CalculationSubformula'): 35,
        (15, 'Conjunction'): 16, (15, 'FinallyOperator'): 92,
        (15, 'GloballyOperator'): 94, (15, 'MultiplicativeNumber'): 41,
        (15, 'NextOperator'): 93, (15, 'NotOperator'): 95,
        (15, 'NumberBrackets'): 51, (15, 'NumberExpression'): 37,
        (15, 'UnaryFormula'): 20, (15, 'UnaryTemporalOperator'): 24,
        (16, 'ConjunctionOperator'): 18, (17, 'BinaryTemporalOperator'): 21,
        (17, 'UntilOperator'): 55, (17, 'WeakUntilOperator'): 56,
        (18, 'Assignment'): 34, (18, 'AtomicFormula'): 23,
        (18, 'AtomicNumberExpression'): 46, (18, 'BinaryTemporalFormula'): 19,
        (18, 'BooleanAtomicFormula'): 29, (18, 'Brackets'): 28,
        (18, 'CalculationSubformula'): 35, (18, 'FinallyOperator'): 92,
        (18, 'GloballyOperator'): 94, (18, 'MultiplicativeNumber'): 41,
        (18, 'NextOperator'): 93, (18, 'NotOperator'): 95,
        (18, 'NumberBrackets'): 51, (18, 'NumberExpression'): 37,
        (18, 'UnaryFormula'): 20, (18, 'UnaryTemporalOperator'): 24,
        (19, 'BinaryTemporalOperator'): 21, (19, 'UntilOperator'): 55,
        (19, 'WeakUntilOperator'): 56, (21, 'Assignment'): 34,
        (21, 'AtomicFormula'): 23, (21, 'AtomicNumberExpression'): 46,
        (21, 'BooleanAtomicFormula'): 29, (21, 'Brackets'): 28,
        (21, 'CalculationSubformula'): 35, (21, 'FinallyOperator'): 92,
        (21, 'GloballyOperator'): 94, (21, 'MultiplicativeNumber'): 41,
        (21, 'NextOperator'): 93, (21, 'NotOperator'): 95,
        (21, 'NumberBrackets'): 51, (21, 'NumberExpression'): 37,
        (21, 'UnaryFormula'): 22, (21, 'UnaryTemporalOperator'): 24,
        (24, 'Assignment'): 34, (24, 'AtomicFormula'): 23,
        (24, 'AtomicNumberExpression'): 46, (24, 'BooleanAtomicFormula'): 29,
        (24, 'Brackets'): 28, (24, 'CalculationSubformula'): 35,
        (24, 'FinallyOperator'): 92, (24, 'GloballyOperator'): 94,
        (24, 'MultiplicativeNumber'): 41, (24, 'NextOperator'): 93,
        (24, 'NotOperator'): 95, (24, 'NumberBrackets'): 51,
        (24, 'NumberExpression'): 37, (24, 'UnaryFormula'): 25,
        (24, 'UnaryTemporalOperator'): 24, (30, 'Assignment'): 34,
        (30, 'AtomicFormula'): 23, (30, 'AtomicNumberExpression'): 46,
        (30, 'Biimplication'): 4, (30, 'BinaryTemporalFormula'): 17,
        (30, 'BooleanAtomicFormula'): 29, (30, 'Brackets'): 28,
        (30, 'CalculationSubformula'): 35, (30, 'Conjunction'): 14,
        (30, 'Disjunction'): 11, (30, 'FinallyOperator'): 92,
        (30, 'GloballyOperator'): 94, (30, 'Implication'): 3,
        (30, 'MultiplicativeNumber'): 41, (30, 'NextOperator'): 93,
        (30, 'NotOperator'): 95, (30, 'NumberBrackets'): 51,
        (30, 'NumberExpression'): 38, (30, 'UnaryFormula'): 20,
        (30, 'UnaryTemporalOperator'): 24, (30, 'Xor'): 8,
        (32, 'Assignment'): 34, (32, 'AtomicFormula'): 23,
        (32, 'AtomicNumberExpression'): 46, (32, 'Biimplication'): 5,
        (32, 'BinaryTemporalFormula'): 17, (32, 'BooleanAtomicFormula'): 29,
        (32, 'Brackets'): 28, (32, 'CalculationSubformula'): 35,
        (32, 'Conjunction'): 14, (32, 'Disjunction'): 11,
        (32, 'FinallyOperator'): 92, (32, 'GloballyOperator'): 94,
        (32, 'Implication'): 3, (32, 'MultiplicativeNumber'): 41,
        (32, 'NextOperator'): 93, (32, 'NotOperator'): 95,
        (32, 'NumberBrackets'): 51, (32, 'NumberExpression'): 37,
        (32, 'UnaryFormula'): 20, (32, 'UnaryTemporalOperator'): 24,
        (32, 'Xor'): 8, (37, 'EqualOperator'): 77,
        (37, 'GreaterEqualOperator'): 79, (37, 'GreaterOperator'): 76,
        (37, 'NumberComparisonOperator'): 39, (37, 'SmallerEqualOperator'): 80,
        (37, 'SmallerOperator'): 81, (37, 'UnequalOperator'): 78,
        (38, 'EqualOperator'): 77, (38, 'GreaterEqualOperator'): 79,
        (38, 'GreaterOperator'): 76, (38, 'NumberComparisonOperator'): 39,
        (38, 'SmallerEqualOperator'): 80, (38, 'SmallerOperator'): 81,
        (38, 'UnequalOperator'): 78, (39, 'AtomicNumberExpression'): 46,
        (39, 'MultiplicativeNumber'): 41, (39, 'NumberBrackets'): 51,
        (39, 'NumberExpression'): 40, (41, 'AdditionOperator'): 42,
        (42, 'AtomicNumberExpression'): 46, (42, 'MultiplicativeNumber'): 41,
        (42, 'NumberBrackets'): 51, (42, 'NumberExpression'): 43,
        (44, 'AtomicNumberExpression'): 46, (44, 'MultiplicativeNumber'): 41,
        (44, 'NumberBrackets'): 51, (44, 'NumberExpression'): 45,
        (46, 'MultiplicationOperator'): 47, (47, 'AtomicNumberExpression'): 48,
        (47, 'NumberBrackets'): 51, (52, 'AtomicNumberExpression'): 46,
        (52, 'MultiplicativeNumber'): 41, (52, 'NumberBrackets'): 51,
        (52, 'NumberExpression'): 53
    }
    _shift = {
        (0, '!'): 104, (0, '('): 30, (0, '<'): 96, (0, 'F'): 98,
        (0, 'FALSE'): 26, (0, 'G'): 103, (0, 'TRUE'): 27, (0, 'X'): 101,
        (0, '['): 32, (0, 'boolID'): 36, (0, 'next'): 100, (0, 'numID'): 49,
        (0, 'numeral'): 50, (0, '~'): 105, (1, EOF): 106, (2, '<'): 63,
        (3, '-'): 59, (4, ')'): 31, (4, '<'): 63, (5, '<'): 63, (5, ']'): 33,
        (6, '!'): 104, (6, '('): 30, (6, '<'): 96, (6, 'F'): 98,
        (6, 'FALSE'): 26, (6, 'G'): 103, (6, 'TRUE'): 27, (6, 'X'): 101,
        (6, '['): 32, (6, 'boolID'): 36, (6, 'next'): 100, (6, 'numID'): 49,
        (6, 'numeral'): 50, (6, '~'): 105, (7, '-'): 59, (8, '^'): 91,
        (9, '!'): 104, (9, '('): 30, (9, '<'): 96, (9, 'F'): 98,
        (9, 'FALSE'): 26, (9, 'G'): 103, (9, 'TRUE'): 27, (9, 'X'): 101,
        (9, '['): 32, (9, 'boolID'): 36, (9, 'next'): 100, (9, 'numID'): 49,
        (9, 'numeral'): 50, (9, '~'): 105, (10, '^'): 91, (11, '\\'): 68,
        (11, '|'): 70, (12, '!'): 104, (12, '('): 30, (12, '<'): 96,
        (12, 'F'): 98, (12, 'FALSE'): 26, (12, 'G'): 103, (12, 'TRUE'): 27,
        (12, 'X'): 101, (12, '['): 32, (12, 'boolID'): 36, (12, 'next'): 100,
        (12, 'numID'): 49, (12, 'numeral'): 50, (12, '~'): 105, (13, '\\'): 68,
        (13, '|'): 70, (14, '&'): 74, (14, '/'): 72, (15, '!'): 104,
        (15, '('): 30, (15, '<'): 96, (15, 'F'): 98, (15, 'FALSE'): 26,
        (15, 'G'): 103, (15, 'TRUE'): 27, (15, 'X'): 101, (15, '['): 32,
        (15, 'boolID'): 36, (15, 'next'): 100, (15, 'numID'): 49,
        (15, 'numeral'): 50, (15, '~'): 105, (16, '&'): 74, (16, '/'): 72,
        (17, 'U'): 57, (17, 'W'): 58, (18, '!'): 104, (18, '('): 30,
        (18, '<'): 96, (18, 'F'): 98, (18, 'FALSE'): 26, (18, 'G'): 103,
        (18, 'TRUE'): 27, (18, 'X'): 101, (18, '['): 32, (18, 'boolID'): 36,
        (18, 'next'): 100, (18, 'numID'): 49, (18, 'numeral'): 50,
        (18, '~'): 105, (19, 'U'): 57, (19, 'W'): 58, (21, '!'): 104,
        (21, '('): 30, (21, '<'): 96, (21, 'F'): 98, (21, 'FALSE'): 26,
        (21, 'G'): 103, (21, 'TRUE'): 27, (21, 'X'): 101, (21, '['): 32,
        (21, 'boolID'): 36, (21, 'next'): 100, (21, 'numID'): 49,
        (21, 'numeral'): 50, (21, '~'): 105, (24, '!'): 104, (24, '('): 30,
        (24, '<'): 96, (24, 'F'): 98, (24, 'FALSE'): 26, (24, 'G'): 103,
        (24, 'TRUE'): 27, (24, 'X'): 101, (24, '['): 32, (24, 'boolID'): 36,
        (24, 'next'): 100, (24, 'numID'): 49, (24, 'numeral'): 50,
        (24, '~'): 105, (30, '!'): 104, (30, '('): 30, (30, ')'): 99,
        (30, '<'): 96, (30, 'F'): 98, (30, 'FALSE'): 26, (30, 'G'): 103,
        (30, 'TRUE'): 27, (30, 'X'): 101, (30, '['): 32, (30, 'boolID'): 36,
        (30, 'next'): 100, (30, 'numID'): 49, (30, 'numeral'): 50,
        (30, '~'): 105, (32, '!'): 104, (32, '('): 30, (32, '<'): 96,
        (32, 'F'): 98, (32, 'FALSE'): 26, (32, 'G'): 103, (32, 'TRUE'): 27,
        (32, 'X'): 101, (32, '['): 32, (32, ']'): 102, (32, 'boolID'): 36,
        (32, 'next'): 100, (32, 'numID'): 49, (32, 'numeral'): 50,
        (32, '~'): 105, (37, '!'): 85, (37, '<'): 83, (37, '='): 84,
        (37, '>'): 82, (38, '!'): 85, (38, ')'): 54, (38, '<'): 83,
        (38, '='): 84, (38, '>'): 82, (39, '('): 52, (39, 'numID'): 49,
        (39, 'numeral'): 50, (41, '+'): 89, (41, 'SubtractionOperator'): 44,
        (42, '('): 52, (42, 'numID'): 49, (42, 'numeral'): 50, (44, '('): 52,
        (44, 'numID'): 49, (44, 'numeral'): 50, (46, '*'): 90, (47, '('): 52,
        (47, 'numID'): 49, (47, 'numeral'): 50, (52, '('): 52,
        (52, 'numID'): 49, (52, 'numeral'): 50, (53, ')'): 54, (59, '-'): 60,
        (59, '>'): 62, (60, '>'): 61, (63, '-'): 64, (64, '-'): 65,
        (64, '>'): 67, (65, '>'): 66, (68, '/'): 69, (70, '|'): 71,
        (72, '\\'): 73, (74, '&'): 75, (82, '='): 88, (83, '='): 87,
        (85, '='): 86, (96, '>'): 97
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = input.next()
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = (X,) + tuple(s[1] for s in stack[-n:])
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in self._reduce.keys()+self._shift.keys()
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(input.next())
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree
